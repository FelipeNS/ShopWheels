/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package shopwheels;

import java.sql.*;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author felipe
 */
public class AlteraCliente extends javax.swing.JInternalFrame {

    /**
     * Creates new form AlteraCliente
     */
    public AlteraCliente() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtNome = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtID = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        btnSalvar = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();
        btnExcluir = new javax.swing.JButton();
        btnAlterar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblCliente = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        setTitle("Alterar Clente");
        setMaximumSize(new java.awt.Dimension(452, 430));
        setMinimumSize(new java.awt.Dimension(452, 430));
        setPreferredSize(new java.awt.Dimension(452, 430));
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });
        getContentPane().setLayout(null);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Cliente", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, new java.awt.Color(255, 255, 255)));
        jPanel1.setOpaque(false);

        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Nome :");

        txtNome.setBackground(new java.awt.Color(204, 204, 204));

        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("ID :");

        txtID.setEditable(false);
        txtID.setBackground(new java.awt.Color(204, 204, 204));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(txtNome)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel1);
        jPanel1.setBounds(6, 6, 431, 128);

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Ações", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, new java.awt.Color(255, 255, 255)));
        jPanel4.setOpaque(false);

        btnSalvar.setBackground(new java.awt.Color(153, 153, 153));
        btnSalvar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconPack/salvar.png"))); // NOI18N
        btnSalvar.setText("Salvar");
        btnSalvar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalvarActionPerformed(evt);
            }
        });

        btnCancelar.setBackground(new java.awt.Color(153, 153, 153));
        btnCancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconPack/cancelar.png"))); // NOI18N
        btnCancelar.setText("Cancelar");
        btnCancelar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        btnExcluir.setBackground(new java.awt.Color(153, 153, 153));
        btnExcluir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconPack/excluir.png"))); // NOI18N
        btnExcluir.setText("Excluir");
        btnExcluir.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcluirActionPerformed(evt);
            }
        });

        btnAlterar.setBackground(new java.awt.Color(153, 153, 153));
        btnAlterar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconPack/alterar.png"))); // NOI18N
        btnAlterar.setText("Alterar");
        btnAlterar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnAlterar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAlterarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnAlterar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnExcluir)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnSalvar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSalvar)
                    .addComponent(btnCancelar)
                    .addComponent(btnExcluir)
                    .addComponent(btnAlterar))
                .addContainerGap(13, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel4);
        jPanel4.setBounds(6, 143, 416, 89);

        tblCliente.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tblCliente.setOpaque(false);
        jScrollPane1.setViewportView(tblCliente);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(6, 243, 431, 146);

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/backGrounds/AlteraCliente.png"))); // NOI18N
        jLabel3.setMaximumSize(new java.awt.Dimension(440, 410));
        jLabel3.setMinimumSize(new java.awt.Dimension(440, 410));
        jLabel3.setPreferredSize(new java.awt.Dimension(440, 410));
        getContentPane().add(jLabel3);
        jLabel3.setBounds(0, 0, 440, 410);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        // TODO add your handling code here:
        
        // Atualizar tabela
            atualizarTabela();
        
        // Desabilitar botões
            btnCancelar.setEnabled(false);
            btnSalvar.setEnabled(false);
            
    }//GEN-LAST:event_formComponentShown

    private void btnExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcluirActionPerformed
        // TODO add your handling code here:
        
        if (tblCliente.getRowCount() > 0) {
          if (JOptionPane.showConfirmDialog(null, "Ao excluir um(a) cliente, dados de telefones, carros, entregas, vendas referentes a ele(a) serão excluidos \nDeseja realmente excluir ?")== JOptionPane.OK_OPTION) { 
            
        // Setando valores nas variáveis
            int linhaSelecionada = tblCliente.getSelectedRow();
            String id = tblCliente.getValueAt(linhaSelecionada, 0).toString();
            
            // Conectando no Banco
                try {
                    Connection conexaoDB = ConexaoDB.abrir();
                
                // Pegando id de carros pertencentes ao cliente para ecluir entrega e venda
                    Statement comandoIdCar = conexaoDB.createStatement();
                    ResultSet resultadoIdCar = comandoIdCar.executeQuery("SELECT car_id FROM carro WHERE car_fk_cliente="+id);
                    
                    while (resultadoIdCar.next()) {                        
                        int idCar = resultadoIdCar.getInt("car_id");
                        
                        // Pegando id de vendas relacionadas ao carro para excluir itens vendidos
                            Statement comandoIdVen = conexaoDB.createStatement();
                            ResultSet resultadoIdVen = comandoIdVen.executeQuery("SELECT ven_id FROM venda WHERE ven_fk_carro="+idCar);
                            
                            while (resultadoIdVen.next()) {
                                int idVen = resultadoIdVen.getInt("ven_id");
                                
                             // Executando comando MySQL para excluir itens vendidos   
                                 CallableStatement comandoExIte = conexaoDB.prepareCall("DELETE FROM itensVend WHERE ite_fk_venda=?");
                                 comandoExIte.setInt(1, idVen);
                                 comandoExIte.execute();
                         
                            }
                        
                        // Executando comando MySQL para excluir entrega   
                            CallableStatement comandoExEnt = conexaoDB.prepareCall("DELETE FROM entrega WHERE ent_fk_carro=?");
                            comandoExEnt.setInt(1, idCar);
                            comandoExEnt.execute();
                            
                        // Executando comando MySQL para excluir carro   
                            CallableStatement comandoExVen = conexaoDB.prepareCall("DELETE FROM venda WHERE ven_fk_carro=?");
                            comandoExVen.setInt(1, idCar);
                            comandoExVen.execute();    
                        
                    }
                   
                // Executando comando MySQL para excluir carro   
                    CallableStatement comandoExCar = conexaoDB.prepareCall("DELETE FROM carro WHERE car_fk_cliente=?");
                    comandoExCar.setInt(1, Integer.parseInt(id));
                    comandoExCar.execute();
                  
                // Executando comando MySQL para excluir telefone   
                    CallableStatement comandoExTel = conexaoDB.prepareCall("DELETE FROM telefone WHERE tel_fk_cliente=?");
                    comandoExTel.setInt(1, Integer.parseInt(id));
                    comandoExTel.execute();    
            
                // Executando comando MySQL para excluir cliente   
                    CallableStatement comandoExCli = conexaoDB.prepareCall("DELETE FROM cliente WHERE cli_id=?");
                    comandoExCli.setInt(1, Integer.parseInt(id));
                    comandoExCli.execute();
                    
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Botao excluir " +e.getMessage());
            
                }
            
          }
        }
        
        // Atualizar tabela
            atualizarTabela();
        
    }//GEN-LAST:event_btnExcluirActionPerformed

    private void btnAlterarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAlterarActionPerformed
        // TODO add your handling code here:
        
        // Pegando dados da tabela
            if (tblCliente.getRowCount() > 0) {
                int linhaSelecionada = tblCliente.getSelectedRow();
            
            // Informações Pessoais
                String id = tblCliente.getValueAt(linhaSelecionada, 0).toString();
                String nome = tblCliente.getValueAt(linhaSelecionada, 1).toString();
                
            // Colocando informações nos campos    
                txtID.setText(id);
                txtNome.setText(nome);
                
            // Habilitar campos para editar   
                txtNome.setEditable(true);
                
            // Habilitar botões
                btnCancelar.setEnabled(true);
                btnSalvar.setEnabled(true);
            
            // Desabilitar botões
                btnExcluir.setEnabled(false);
                btnAlterar.setEnabled(false);
        }
    }//GEN-LAST:event_btnAlterarActionPerformed

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        // TODO add your handling code here:
        
        // Limpar campos
            txtNome.setText("");
            txtID.setText("");
        
        // Desabilitar campos
            txtNome.setEditable(false);
        
        // Habilitar botões
            btnAlterar.setEnabled(true);
            btnExcluir.setEnabled(true);
         
        // Desabilitar botões
            btnCancelar.setEnabled(false);
            btnSalvar.setEnabled(false);
    }//GEN-LAST:event_btnCancelarActionPerformed

    private void btnSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalvarActionPerformed
        // TODO add your handling code here:
        
        // Declarando variáveis
            String id = txtID.getText();
            String nome = txtNome.getText();

        
        // Salvando na tabela do BD
            if (!"".equals(nome)){
        
        // Conectando no banco    
            try {
                Connection conexao = ConexaoDB.abrir();
            
            // Executando comando MySQL para salvar no BD
                CallableStatement comandoCli = conexao.prepareCall("UPDATE cliente SET cli_nome=? WHERE cli_id=?");
                comandoCli.setString(1, nome);
                comandoCli.setString(2, id);
                comandoCli.execute();
                
                JOptionPane.showMessageDialog(null, "Alterado com sucesso");
        
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null,"Botão salvar" + e.getMessage());
            
            }
            }else{
                JOptionPane.showMessageDialog(null, "Prencha todos os campos!");   
            }
        
    // Limpar campos    
        txtNome.setText("");
        txtID.setText("");
    
    // Desabilitar campos
        txtNome.setEditable(false);
    
    // Desabilitar botões
        btnSalvar.setEnabled(false);
        btnCancelar.setEnabled(false);
    
    // Habilitar botões
        btnExcluir.setEnabled(true);
        btnAlterar.setEnabled(true);
    
    // Atualizar tabela
        atualizarTabela();
        
    }//GEN-LAST:event_btnSalvarActionPerformed

    
    public void atualizarTabela(){
    
    // Definindo modelo da tabela
    DefaultTableModel modelo = new DefaultTableModel();
        modelo.addColumn("ID");
        modelo.addColumn("NOME");
        tblCliente.setModel(modelo);
       
    // Conectando com o DB
        try {
            Connection conexaoDB = ConexaoDB.abrir();
            Statement comandoFun = conexaoDB.createStatement();
            ResultSet resultadoTbl = comandoFun.executeQuery("SELECT * FROM cliente");
        
        // Setando valores nas linhas da tabela    
            while (resultadoTbl.next()) {
                Object[] linha = new Object[11];
                linha[0] = resultadoTbl.getInt("cli_id");
                linha[1] = resultadoTbl.getString("cli_nome");
                modelo.insertRow(tblCliente.getRowCount(), linha);
            }
            
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Atualizar tabela" +e.getMessage());
        }   
}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAlterar;
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnExcluir;
    private javax.swing.JButton btnSalvar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblCliente;
    private javax.swing.JTextField txtID;
    private javax.swing.JTextField txtNome;
    // End of variables declaration//GEN-END:variables
}
