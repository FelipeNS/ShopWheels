/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package shopwheels;

import java.sql.*;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author felipe
 */
public class AlteraCarro extends javax.swing.JInternalFrame {

    /**
     * Creates new form AlteraCarro
     */
    public AlteraCarro() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblCarro = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        btnSalvar = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();
        btnExcluir = new javax.swing.JButton();
        btnAlterar = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtModelo = new javax.swing.JTextField();
        txtMarca = new javax.swing.JTextField();
        txtCor = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        cmbProprietario = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        txtID = new javax.swing.JTextField();
        ftxtPlaca = new javax.swing.JFormattedTextField();
        jLabel7 = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        setTitle("Alterar Carro");
        setMaximumSize(new java.awt.Dimension(459, 535));
        setMinimumSize(new java.awt.Dimension(459, 535));
        setPreferredSize(new java.awt.Dimension(459, 535));
        setRequestFocusEnabled(false);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });
        getContentPane().setLayout(null);

        tblCarro.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tblCarro.setOpaque(false);
        jScrollPane1.setViewportView(tblCarro);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(6, 323, 437, 171);

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Ações", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, new java.awt.Color(255, 255, 255)));
        jPanel4.setOpaque(false);

        btnSalvar.setBackground(new java.awt.Color(102, 102, 102));
        btnSalvar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconPack/salvar.png"))); // NOI18N
        btnSalvar.setText("Salvar");
        btnSalvar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalvarActionPerformed(evt);
            }
        });

        btnCancelar.setBackground(new java.awt.Color(102, 102, 102));
        btnCancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconPack/cancelar.png"))); // NOI18N
        btnCancelar.setText("Cancelar");
        btnCancelar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        btnExcluir.setBackground(new java.awt.Color(102, 102, 102));
        btnExcluir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconPack/excluir.png"))); // NOI18N
        btnExcluir.setText("Excluir");
        btnExcluir.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcluirActionPerformed(evt);
            }
        });

        btnAlterar.setBackground(new java.awt.Color(102, 102, 102));
        btnAlterar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconPack/alterar.png"))); // NOI18N
        btnAlterar.setText("Alterar");
        btnAlterar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnAlterar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAlterarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnAlterar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnExcluir)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addComponent(btnSalvar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnCancelar)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSalvar)
                    .addComponent(btnCancelar)
                    .addComponent(btnExcluir)
                    .addComponent(btnAlterar))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel4);
        jPanel4.setBounds(6, 236, 437, 82);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Informações", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, new java.awt.Color(255, 255, 255)));
        jPanel1.setOpaque(false);

        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Modelo :");

        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Marca :");

        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Cor :");

        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Placa :");

        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Proprietário :");

        cmbProprietario.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("ID :");

        txtID.setEditable(false);

        try {
            ftxtPlaca.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("UUU-####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel6)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(txtCor, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtMarca, javax.swing.GroupLayout.DEFAULT_SIZE, 113, Short.MAX_VALUE)
                            .addComponent(ftxtPlaca))
                        .addGap(36, 36, 36)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbProprietario, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(txtModelo, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtModelo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtMarca, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtCor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addComponent(cmbProprietario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ftxtPlaca, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        getContentPane().add(jPanel1);
        jPanel1.setBounds(6, 6, 436, 230);

        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/backGrounds/AlterarCarro.png"))); // NOI18N
        getContentPane().add(jLabel7);
        jLabel7.setBounds(0, 0, 449, 500);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        // TODO add your handling code here:
        
        // Colocando valores no ComboBox
            
        // Conectando no Banco    
            try {
                Connection conexao = ConexaoDB.abrir();
                
            // Executando comando MySQL
                Statement comando = conexao.createStatement();
                ResultSet resultado = comando.executeQuery("SELECT cli_id, cli_nome FROM cliente ORDER BY cli_nome");
            
            // Inserindo itens    
                while (resultado.next()) {
                    int id = resultado.getInt("cli_id");
                    String nome = resultado.getString("cli_nome");
                    cmbProprietario.addItem(id + "-" + nome);
                }
            
            } catch (Exception e) {
        JOptionPane.showMessageDialog(null, "Combo Component Show " +e.getMessage());
        }
            
        // Atualizar tabela
            atualizarTabela();
        
        // Desabilitar campos
            desabilitar();
            
        // Desabilitar botões
            btnCancelar.setEnabled(false);
            btnSalvar.setEnabled(false);
               
    }//GEN-LAST:event_formComponentShown

    private void btnAlterarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAlterarActionPerformed
        // TODO add your handling code here:
        
        // Pegando dados da tabela
            if (tblCarro.getRowCount() > 0) {
                int linhaSelecionada = tblCarro.getSelectedRow();
            
            // Guardando valores pegos
                String id = tblCarro.getValueAt(linhaSelecionada, 0).toString();
                String modelo = tblCarro.getValueAt(linhaSelecionada, 1).toString();
                String marca = tblCarro.getValueAt(linhaSelecionada, 2).toString();
                String cor = tblCarro.getValueAt(linhaSelecionada, 3).toString();
                String placa = tblCarro.getValueAt(linhaSelecionada, 4).toString();
                String cliente = tblCarro.getValueAt(linhaSelecionada, 5).toString();
             
            // Pegando id do cliente
                
            // Conectando no Banco
                try {
                    Connection conexao = ConexaoDB.abrir();
                    
                // Executando comando MySQL    
                    Statement comando = conexao.createStatement();
                    ResultSet resultado = comando.executeQuery("SELECT cli_id, cli_nome FROM cliente ORDER BY cli_nome");
                
                // Colocando resultado em variáveis    
                    while (resultado.next()) {
                        int idCli = resultado.getInt("cli_id");
                        String nome = resultado.getString("cli_nome");
                
                // Verificando igualdade entre resultados        
                    if (nome.equals(cliente)) {
                        String nomeCli;
                        nomeCli = (idCli + "-" + cliente) ;
                
                    // Colocando item na Combo Box    
                        cmbProprietario.setSelectedItem(nomeCli);
                        
                    }
                }
            
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Botão Alterar " +e.getMessage());
                }

            // Colocando informações nos campos    
                txtID.setText(id);
                txtModelo.setText(modelo);
                txtMarca.setText(marca);
                txtCor.setText(cor);
                ftxtPlaca.setText(placa);
            
            // Habilitar campos para editar   
                habilitar();
                
            // Habilitar botões
                btnCancelar.setEnabled(true);
                btnSalvar.setEnabled(true);
            
            // Desabilitar botões
                btnExcluir.setEnabled(false);
                btnAlterar.setEnabled(false);
        
        }
                                              
    }//GEN-LAST:event_btnAlterarActionPerformed

    private void btnExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcluirActionPerformed
        // TODO add your handling code here:
        
        if (tblCarro.getRowCount() > 0) {
         if (JOptionPane.showConfirmDialog(null, "Ao excluir um carro, dados de entregas, vendas referentes a ele serão excluidos \nDeseja realmente excluir ?")== JOptionPane.OK_OPTION) {
        
        // Setando valores nas variáveis     
            int linhaSelecionada = tblCarro.getSelectedRow();
            String id = tblCarro.getValueAt(linhaSelecionada, 0).toString();
            
            // Conectando no Banco        
                try {
                    Connection conexaoDB = ConexaoDB.abrir();
            
                // Pegando id de vendas relacionadas ao carro para excluir itens vendidos
                    Statement comandoIdVen = conexaoDB.createStatement();
                    ResultSet resultadoIdVen = comandoIdVen.executeQuery("SELECT ven_id FROM venda WHERE ven_fk_carro="+id);
                            
                    while (resultadoIdVen.next()) {
                        int idVen = resultadoIdVen.getInt("ven_id");
                                
                    // Executando comando MySQL para excluir itens vendidos   
                        CallableStatement comandoExIte = conexaoDB.prepareCall("DELETE FROM itensVend WHERE ite_fk_venda=?");
                        comandoExIte.setInt(1, idVen);
                        comandoExIte.execute();
                         
                }
                        
                // Executando comando MySQL para excluir entrega   
                    CallableStatement comandoExEnt = conexaoDB.prepareCall("DELETE FROM entrega WHERE ent_fk_carro=?");
                    comandoExEnt.setString(1, id);
                    comandoExEnt.execute();
                            
                // Executando comando MySQL para excluir carro   
                    CallableStatement comandoExVen = conexaoDB.prepareCall("DELETE FROM venda WHERE ven_fk_carro=?");
                    comandoExVen.setString(1, id);
                    comandoExVen.execute();    
                  
                // Executando comando MySQL    
                    CallableStatement comando = conexaoDB.prepareCall("DELETE FROM carro WHERE car_id=?");
                    comando.setInt(1, Integer.parseInt(id));
                    comando.execute();
                
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Botao excluir " +e.getMessage());
            
            }
            
        }
        }
        
        // Atualizar tabela
            atualizarTabela();
         
    }//GEN-LAST:event_btnExcluirActionPerformed

    private void btnSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalvarActionPerformed
        // TODO add your handling code here:
        
        // Declarando variáveis
        
            String id = txtID.getText();
            String modelo = txtModelo.getText();
            String marca = txtMarca.getText();
            String cor = txtCor.getText();
            String placa = ftxtPlaca.getText();
            String cliente = cmbProprietario.getSelectedItem().toString();
        
        // Pegando id do cliente    
            String[] pegaIDCli = cliente.split("-");
            int idCli = Integer.parseInt(pegaIDCli[0]);
            
        
        // Salvando na tabela do BD
            if (!"".equals(modelo) && !"".equals(marca) && !"".equals(cor) && !"".equals(placa)){
        
        // Conectando no banco    
            try {
                Connection conexao = ConexaoDB.abrir();
            
            // Executando comando MySQL
                CallableStatement comandoCar = conexao.prepareCall("UPDATE carro SET car_modelo=?, car_marca=?, car_cor=?, car_placa=?, car_fk_cliente=? WHERE car_id=?");
                comandoCar.setString(1, modelo);
                comandoCar.setString(2, marca);
                comandoCar.setString(3, cor);
                comandoCar.setString(4, placa);
                comandoCar.setInt(5, idCli);
                comandoCar.setString(6, id);
                comandoCar.execute();
                
                JOptionPane.showMessageDialog(null, "Alterado com sucesso");
        
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null,"Botão salvar" + e.getMessage());
            
            }
            }else{
                JOptionPane.showMessageDialog(null, "Prencha todos os campos!");   
            }
        
    // Limpar campos    
        limpar();
    
    // Desabilitar campos
        desabilitar();
    
    // Desabilitar botões
        btnSalvar.setEnabled(false);
        btnCancelar.setEnabled(false);
    
    // Habilitar botões
        btnExcluir.setEnabled(true);
        btnAlterar.setEnabled(true);
    
    // Atualizar tabela
        atualizarTabela();
        
    }//GEN-LAST:event_btnSalvarActionPerformed

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        // TODO add your handling code here:
        
        // Limpar campos
            limpar();
        
        // Desabilitar campos para edição
            desabilitar();
        
        // Desabilitar botões
            btnCancelar.setEnabled(false);
            btnSalvar.setEnabled(false);
            
        // Habilitar botões
            btnExcluir.setEnabled(true);
            btnAlterar.setEnabled(true);
            
    }//GEN-LAST:event_btnCancelarActionPerformed

    
    
public void atualizarTabela(){
    
    // Definindo modelo da tabela
    DefaultTableModel modelo = new DefaultTableModel();
        modelo.addColumn("ID");
        modelo.addColumn("MODELO");
        modelo.addColumn("MARCA");
        modelo.addColumn("COR");
        modelo.addColumn("PLACA");
        modelo.addColumn("PROPRIETÁRIO");
        tblCarro.setModel(modelo);
       
    // Conectando com o DB
        try {
            Connection conexaoDB = ConexaoDB.abrir();
            
        // Executando comando MySQL    
            Statement comandoFun = conexaoDB.createStatement();
            ResultSet resultadoTbl = comandoFun.executeQuery("SELECT car_id, cli_nome, car_modelo, car_marca, car_cor, car_placa FROM carro INNER JOIN cliente ON car_fk_cliente=cli_id");
        
        // Setando valores nas linhas da tabela    
            while (resultadoTbl.next()) {
                Object[] linha = new Object[6];
                linha[0] = resultadoTbl.getInt("car_id");
                linha[1] = resultadoTbl.getString("car_modelo");
                linha[2] = resultadoTbl.getString("car_marca");
                linha[3] = resultadoTbl.getString("car_cor");
                linha[4] = resultadoTbl.getString("car_placa");
                linha[5] = resultadoTbl.getString("cli_nome");
                modelo.insertRow(tblCarro.getRowCount(), linha);
            }
            
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Atualizar tabela" +e.getMessage());
        }   
}    


public void desabilitar(){
  // Desabilitar campos para edições
      txtModelo.setEditable(false);
      txtMarca.setEditable(false);
      txtCor.setEditable(false);
      ftxtPlaca.setEditable(false);
      cmbProprietario.setEnabled(false);
}


public void habilitar(){
  // Habilitar campos para edições
      txtModelo.setEditable(true);
      txtMarca.setEditable(true);
      txtCor.setEditable(true);
      ftxtPlaca.setEditable(true);
      cmbProprietario.setEnabled(true);
}


public void limpar(){
  // Limpar campos  
      txtModelo.setText("");
      txtMarca.setText("");
      txtCor.setText("");
      ftxtPlaca.setText("");
      txtID.setText("");
      cmbProprietario.setSelectedIndex(0);
}    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAlterar;
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnExcluir;
    private javax.swing.JButton btnSalvar;
    private javax.swing.JComboBox cmbProprietario;
    private javax.swing.JFormattedTextField ftxtPlaca;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblCarro;
    private javax.swing.JTextField txtCor;
    private javax.swing.JTextField txtID;
    private javax.swing.JTextField txtMarca;
    private javax.swing.JTextField txtModelo;
    // End of variables declaration//GEN-END:variables
}
